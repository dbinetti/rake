# Generated by Django 3.1.4 on 2020-12-02 13:49

import address.models
import app.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import hashid_field.field
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('address', '0003_auto_20200830_1851'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', min_length=7, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Picture',
            fields=[
                ('id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', min_length=7, primary_key=True, serialize=False)),
                ('image', models.ImageField(blank=True, upload_to=app.models.UploadPath('image'))),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Recipient',
            fields=[
                ('name', models.CharField(default='', max_length=100)),
                ('formal_name', models.CharField(blank=True, max_length=100, verbose_name='Formal Name')),
                ('familiar_name', models.CharField(blank=True, max_length=100, verbose_name='Familiar Name')),
                ('greeting_name', models.CharField(blank=True, max_length=100, verbose_name='Greeting Name')),
                ('prefix', models.CharField(blank=True, max_length=100, verbose_name='Name Prefix')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='Last Name')),
                ('middle_name', models.CharField(blank=True, max_length=100, verbose_name='Middle Name')),
                ('nick_name', models.CharField(blank=True, max_length=100, verbose_name='Nick Name')),
                ('suffix', models.CharField(blank=True, max_length=100, verbose_name='Name Suffix')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', min_length=7, primary_key=True, serialize=False)),
                ('size', models.IntegerField(choices=[(110, 'Small (1-15 bags)'), (120, 'Medium (16-30 bags)'), (130, 'Large (35+ bags)')], help_text='Yard Size')),
                ('is_verified', models.BooleanField(help_text='We are only able to service yards for persons in one of these categories.')),
                ('is_dog', models.BooleanField(help_text='If you have a dog, it must be contained in your home for us to rake.\xa0 Also, you must clean up all animal waste before we arrive or our volunteer group will not be able to rake.')),
                ('is_waiver', models.BooleanField(help_text='I agree to waive and release Rake Up Eagle and the sponsors of this event, including all persons and agencies connected with this event from all claims for damages, injuries or death, arising from my participation in  this event. I will provide my own insurance and care, if necessary. I also understand and agree that Rake Up Eagle or a sponsor may subsequently use for publicity and/or promotional purposes pictures of me and my team participating in this event without obligation of liability to me. I understand that the work done on my property is done by volunteers and will not hold them or Rake Up Eagle responsible for damage to personal property. I have read this waiver carefully and having done so, I am signing voluntarily.')),
                ('notes', models.TextField(blank=True, default='', help_text='Please add any other notes you think we should know.', max_length=2000)),
                ('bags', models.IntegerField(blank=True, help_text='Actual Bags Used', null=True)),
                ('hours', models.FloatField(blank=True, help_text='Actual Hours Worked', null=True)),
                ('adults', models.IntegerField(blank=True, help_text='Actual Adults', null=True)),
                ('children', models.IntegerField(blank=True, help_text='Actual Children', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('address', address.models.AddressField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='address.address')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Volunteer',
            fields=[
                ('name', models.CharField(default='', max_length=100)),
                ('formal_name', models.CharField(blank=True, max_length=100, verbose_name='Formal Name')),
                ('familiar_name', models.CharField(blank=True, max_length=100, verbose_name='Familiar Name')),
                ('greeting_name', models.CharField(blank=True, max_length=100, verbose_name='Greeting Name')),
                ('prefix', models.CharField(blank=True, max_length=100, verbose_name='Name Prefix')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='Last Name')),
                ('middle_name', models.CharField(blank=True, max_length=100, verbose_name='Middle Name')),
                ('nick_name', models.CharField(blank=True, max_length=100, verbose_name='Nick Name')),
                ('suffix', models.CharField(blank=True, max_length=100, verbose_name='Name Suffix')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', min_length=7, primary_key=True, serialize=False)),
                ('number', models.IntegerField(help_text='Number in your group.', null=True)),
                ('adults', models.IntegerField(blank=True, help_text='Number of adults in your group.', null=True)),
                ('children', models.IntegerField(blank=True, help_text='Number of children in your group.', null=True)),
                ('notes', models.TextField(blank=True, default='', help_text='Notes.', max_length=512)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('address', address.models.AddressField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='address.address')),
                ('recipient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='volunteers', to='app.recipient')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='volunteer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
